---
title: "Cook County Property Assessment - Part 1"
author: "Ryan Zomorrodi"
date: last_modified
format: 
    html:
        embed-resources: true
        theme: sandstone
        code-fold: true
execute:
    warning: false
---

# Part 1 (Due 2/13, 11:59pm)
You have been tasked with undertaking a multi-part analysis of homes in Cook County, Illinois. You are provided with a database to facilitate this analysis. This database was constructed from the Cook County Open Data portal. More information is included in the database section below. Note that the database must be downloaded.

Four tables are provided:

**assessments** - 2021 to 2023 (not finalized)  
See: https://datacatalog.cookcountyil.gov/Property-Taxation/Assessor-Assessed-Values/uzyt-m557/about_data

<details>
    <summary>View Table Columns</summary>
``` {r}
#| echo: false

library(tidyverse)

read_csv("data/assessments.csv") %>%
    knitr::kable()
```
</details>

**characteristics** - Tax year 2023 characteristics.
See: https://datacatalog.cookcountyil.gov/Property-Taxation/Assessor-Single-and-Multi-Family-Improvement-Chara/x54s-btds/about_data

<details>
    <summary>View Table Columns</summary>
``` {r}
#| echo: false

library(tidyverse)

read_csv("data/characteristics.csv") %>%
    knitr::kable()
```
</details>

**geospatial_universe** - Information on latitude/longitude and neighborhood code from tax year 2022 (released on a delay). Only a subset of columns is selected.
See: https://datacatalog.cookcountyil.gov/Property-Taxation/Assessor-Parcel-Universe/nj4t-kc8j/about_data

<details>
    <summary>View Table Columns</summary>
``` {r}
#| echo: false

library(tidyverse)

read_csv("data/geospatial_universe.csv") %>%
    knitr::kable()
```
</details>

**sales** - Information on sales from 2021 to present (current mid-September 2023)
See: https://datacatalog.cookcountyil.gov/Property-Taxation/Assessor-Parcel-Sales/wvhk-k5uv/about_data

<details>
    <summary>View Table Columns</summary>
``` {r}
#| echo: false

library(tidyverse)

read_csv("data/sales.csv") %>%
    knitr::kable()
```
</details>

## Conduct an exploratory data analysis

First let's load our data and make some joins to sales data
``` {r}
library(tidyverse)
con <- DBI::dbConnect(RSQLite::SQLite(), "data/cook.sqlite")

sfh_sales <- tbl(con, 'sales') %>%
    collect() %>%
    filter(class %in% c(202, 203, 204, 205, 206, 207, 208, 209, 210, 234, 278)) %>%
    mutate(sale_date = as_datetime(sale_date)) %>% 
    mutate(township_code = as.character(township_code)) %>%
    distinct(doc_no, .keep_all = TRUE)

township_codes <- read_csv("data/township_codes.csv") %>% 
    mutate(across(where(is.numeric), as.character))

sfh_characteristics <- tbl(con, 'characteristics') %>%
    collect() %>%
    distinct(pin, .keep_all = T) %>%
    select(-c(class, township_code)) %>%
    right_join(sfh_sales, by = join_by(pin, year == year)) %>%
    right_join(township_codes)

sfh_assessments <- tbl(con, 'assessments') %>%
    collect() %>%
    mutate(township_code = as.character(township_code)) %>%
    distinct(pin, .keep_all = T) %>%
    select(-c(class, township_code)) %>%
    right_join(sfh_sales, by = join_by(pin, tax_year == year))
```

### Maps

The distributions of average sale price for single family homes by township lines up with most people's preconceptions of Cook County. We can see that average sale prices are highest in townships in northern Cook County in Chicago and the more wealthy northern suburbs. Within these very same townships, we can see that single family homes both tend to be larger and tend to cost more per square foot. Lastly, we can see that the oldest households tend be within the city of Chicago, while the mean age of houses within Cook County seems to lower, the farther you get from the city of Chicago.

::: {.panel-tabset}

## Sale Price

``` {r}
library(sf)
library(leaflet)
library(scales)

townships <- read_sf("https://gis.cookcountyil.gov/traditional/rest/services/politicalBoundary/MapServer/3/query?outFields=*&where=1%3D1&f=geojson") %>%
    mutate(ORIGOID = as.character(ORIGOID)) %>%
    right_join(township_codes, by = join_by(ORIGOID == origoid))

sfh_mean_by_township <- sfh_characteristics %>%
    group_by(township_code) %>%
    reframe(sale_price_mean = mean(sale_price, na.rm = T),
        bldg_sf_mean = mean(char_bldg_sf, na.rm = T),
        sale_price_per_sf = mean(sale_price/char_bldg_sf, na.rm = T),
        years_old_mean = mean(2023 - char_yrblt, na.rm = T)) %>%
    right_join(townships) %>%
    st_as_sf()
    
qpal <- colorQuantile("Greens", sfh_mean_by_township$sale_price_mean, n = 5)

sfh_mean_by_township %>%
    leaflet() %>%
        addProviderTiles(providers$CartoDB.Positron) %>% 
        addPolygons(
            fillColor = ~ qpal(sale_price_mean),
            fillOpacity = 0.7,
            color = "Black",
            weight = 0.5,
            opacity = 0.5,
            highlightOptions = highlightOptions(
                weight = 2,
                color = "Black",
                fillOpacity = 1,
                bringToFront = T),
            label = sprintf(
                "<strong>%s</strong><br>Average Sale: %s<br/>",
                sfh_mean_by_township$NAME,
                label_currency()(sfh_mean_by_township$sale_price_mean)) %>% 
                    lapply(htmltools::HTML),
            labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "3px 8px"),
                textsize = "12px",
                direction = "auto"))   %>%
        addLegend(
            pal = qpal,
            values = sfh_mean_by_township$sale_price_mean,
            opacity = 0.7,
            title = "Mean Sale Price of </br>Single Family Homes </br>in Cook County by </br>Township",
            position = "topright",
            na.label = "Insufficient Data",
            labFormat = function(type, cuts, p) {
                n = length(cuts)
                p = paste0(round(p * 100), '%')
                cuts = paste0(label_currency()(cuts[-n]), " - ", label_currency()(cuts[-1]))
                paste0(
                    '<span title="', p[-n], " - ", p[-1], '">', cuts,
                    '</span>'
                )
            })
```

## Building SqFt

```{r}
qpal <- colorQuantile("Oranges", sfh_mean_by_township$bldg_sf_mean, n = 5)

sfh_mean_by_township %>%
    leaflet() %>%
        addProviderTiles(providers$CartoDB.Positron) %>% 
        addPolygons(
            fillColor = ~ qpal(bldg_sf_mean),
            fillOpacity = 0.7,
            color = "Black",
            weight = 0.5,
            opacity = 0.5,
            highlightOptions = highlightOptions(
                weight = 2,
                color = "Black",
                fillOpacity = 1,
                bringToFront = T),
            label = sprintf(
                "<strong>%s</strong><br>Mean Building sqft: %s<br/>",
                sfh_mean_by_township$NAME,
                label_comma(1)(sfh_mean_by_township$bldg_sf_mean)) %>% 
                    lapply(htmltools::HTML),
            labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "3px 8px"),
                textsize = "12px",
                direction = "auto"))   %>%
        addLegend(
            pal = qpal,
            values = sfh_mean_by_township$bldg_sf_mean,
            opacity = 0.7,
            title = "Mean Building Square Feet</br> of Single Family Homes </br>in Cook County by </br>Township",
            position = "topright",
            na.label = "Insufficient Data",
            labFormat = function(type, cuts, p) {
                n = length(cuts)
                p = paste0(round(p * 100), '%')
                cuts = paste0(label_comma(1)(cuts[-n]), " - ", label_comma(1)(cuts[-1]))
                paste0(
                    '<span title="', p[-n], " - ", p[-1], '">', cuts,
                    '</span>'
                )
            })
```

## Price Per SqFt

``` {r}
qpal <- colorQuantile("Blues", sfh_mean_by_township$sale_price_per_sf, n = 5)

sfh_mean_by_township %>%
    leaflet() %>%
        addProviderTiles(providers$CartoDB.Positron) %>% 
        addPolygons(
            fillColor = ~ qpal(sale_price_per_sf),
            fillOpacity = 0.7,
            color = "Black",
            weight = 0.5,
            opacity = 0.5,
            highlightOptions = highlightOptions(
                weight = 2,
                color = "Black",
                fillOpacity = 1,
                bringToFront = T),
            label = sprintf(
                "<strong>%s</strong><br>%s per sqft<br/>",
                sfh_mean_by_township$NAME,
                label_currency()(sfh_mean_by_township$sale_price_per_sf)) %>% 
                    lapply(htmltools::HTML),
            labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "3px 8px"),
                textsize = "12px",
                direction = "auto")) %>%
        addLegend(
            pal = qpal,
            values = sfh_mean_by_township$sale_price_per_sf,
            opacity = 0.7,
            title = "Dollars per Square Foot of </br>Single Family Homes in </br>Cook County by Township",
            position = "topright",
            na.label = "Insufficient Data",
            labFormat = function(type, cuts, p) {
                n = length(cuts)
                p = paste0(round(p * 100), '%')
                cuts = paste0(label_currency()(cuts[-n]), " - ", label_currency()(cuts[-1]))
                paste0(
                    '<span title="', p[-n], " - ", p[-1], '">', cuts,
                    '</span>'
                )
            })
```

## Years old

``` {r}
qpal <- colorQuantile("Reds", sfh_mean_by_township$years_old_mean, n = 5)

sfh_mean_by_township %>%
    leaflet() %>%
        addProviderTiles(providers$CartoDB.Positron) %>% 
        addPolygons(
            fillColor = ~ qpal(years_old_mean),
            fillOpacity = 0.7,
            color = "Black",
            weight = 0.5,
            opacity = 0.5,
            highlightOptions = highlightOptions(
                weight = 2,
                color = "Black",
                fillOpacity = 1,
                bringToFront = T),
            label = sprintf(
                "<strong>%s</strong><br>%s years old<br/>",
                sfh_mean_by_township$NAME,
                label_number(1)(sfh_mean_by_township$years_old_mean)) %>% 
                    lapply(htmltools::HTML),
            labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "3px 8px"),
                textsize = "12px",
                direction = "auto")) %>%
        addLegend(
            pal = qpal,
            values = sfh_mean_by_township$years_old_mean,
            opacity = 0.7,
            title = "Mean Years Old of </br>Single Family Homes </br>in Cook County by </br>Township",
            position = "topright",
            na.label = "Insufficient Data",
            labFormat = function(type, cuts, p) {
                n = length(cuts)
                p = paste0(round(p * 100), '%')
                cuts = paste0(label_number(1)(cuts[-n]), " - ", label_number(1)(cuts[-1]))
                paste0(
                    '<span title="', p[-n], " - ", p[-1], '">', cuts,
                    '</span>'
                )
            })
```

:::

### Sale Price Distributions

It seems that single family homes built in the last 30 - 40 years tend to be more expensive, but beyond that sale prices do not seem to be associated with sale prices. As expected, higher square footage single family homes tend to sell for more, but there is still a large amount variability in sale prices. Larger land square footage single family homes seem to sell for more up until about 15,000 square feet where additional land does not seem to be associated with much greater sale prices. More beds, rooms, and bathrooms seem to all be associated with greater sale prices. However, there seems to be some odd outliers with 0 bedrooms or 2 rooms that are selling for more than would be expected. This may be something we would want to investigate later. These could be simply a result of faulty assessor data.

::: {.panel-tabset}
## Year built

``` {r}
sfh_characteristics %>%
    filter(sale_price <= 10^7) %>%
    ggplot(aes(x = char_yrblt, y = sale_price)) +
        geom_point(size = 0.1) +
        geom_smooth(method = "gam", color = "springgreen4") +
        scale_y_continuous(labels = label_currency()) + 
        labs(title = "Single Family Home Sale Price and Year Built in Cook County, IL", 
            x = "Year Built", 
            y = "Sale Price")
``` 

## Building SqFt

``` {r}
sfh_characteristics %>%
    filter(sale_price <= 10^7) %>%
    ggplot(aes(x = char_bldg_sf, y = sale_price)) +
        geom_point(size = 0.1) +
        geom_smooth(method = "gam", color = "springgreen4") +
        scale_y_continuous(labels = label_currency()) + 
        labs(title = "Single Family Home Building Square Footage and Sale Price \nin Cook County, IL", 
            x = "Building Square Footage", 
            y = "Sale Price")
``` 

## Land SqFt

``` {r}
sfh_characteristics %>%
    filter(sale_price <= 10^7) %>%
    filter(char_land_sf <= 10^5) %>%
    ggplot(aes(x = char_land_sf, y = sale_price)) +
        geom_point(size = 0.1) +
        geom_smooth(method = "gam", color = "springgreen4") +
        scale_y_continuous(labels = label_currency()) + 
        labs(title = "Single Family Home Building Square Footage and Sale Price \nin Cook County, IL", 
            x = "Land Square Footage", 
            y = "Sale Price")
``` 

## Beds

``` {r}
sfh_characteristics %>%
    ggplot() +
        geom_boxplot(aes(x = char_beds, y = sale_price, fill = factor(char_beds))) +
        scale_x_continuous(n.breaks = 9) +
        scale_y_continuous(labels = label_currency()) +
        labs(title = "Single Family Home Number of Bedrooms and Sale Price \nin Cook County, IL", 
            x = "Number of Bedrooms", 
            y = "Sale Price") + 
        theme(legend.position="none")
```

## Rooms
``` {r}
sfh_characteristics %>%
    ggplot() +
        geom_boxplot(aes(x = char_rooms, y = sale_price, fill = factor(char_rooms))) +
        scale_x_continuous(n.breaks = 20) +
        scale_y_continuous(labels = label_currency()) +
        labs(title = "Single Family Home Number of Rooms and Sale Price \nin Cook County, IL", 
            x = "Number of Rooms", 
            y = "Sale Price") + 
        theme(legend.position="none")
```

## Bathrooms
``` {r}
sfh_characteristics %>%
    ggplot() +
        geom_boxplot(aes(x = char_fbath + char_hbath * 0.5, y = sale_price, fill = factor(char_fbath + char_hbath * 0.5))) +
        scale_x_continuous(n.breaks = 20) +
        scale_y_continuous(labels = label_currency()) +
        labs(title = "Single Family Home Total Number of Baths and Sale Price \nin Cook County, IL", 
            x = "Total Number of Baths", 
            y = "Sale Price") + 
        theme(legend.position="none")
```
:::

## Use `cmfproperty` to conduct a sales ratio study across the relevant time period

Let's get our data into a format that the `cmfproperty` package can use.
``` {r}
#| output: false

library(cmfproperty)

con <- DBI::dbConnect(RSQLite::SQLite(), "data/cook.sqlite")

sfh_sales_cmf <- sfh_sales %>% 
    select(pin, year, sale_price, doc_no) %>%
    distinct(doc_no, .keep_all = TRUE) %>%
    select(-doc_no) %>%
    filter(as.numeric(sale_price) > 2500)

assessments_cmf <- tbl(con, "assessments") %>%
    collect() %>%
    select(pin, tax_year, certified_tot)

sale_assess_cmf <- sfh_sales_cmf %>% 
    left_join(assessments_cmf, by = join_by(pin, year == tax_year)) %>% 
    rename(PIN = pin, SALE_YEAR = year, SALE_PRICE = sale_price, ASSESSED_VALUE = certified_tot) %>%
    mutate(ASSESSED_VALUE = 10 * ASSESSED_VALUE)

ratios <- reformat_data(sale_assess_cmf,
    sale_col = "SALE_PRICE",
    assessment_col = "ASSESSED_VALUE",
    sale_year_col = "SALE_YEAR")

stats <- calc_iaao_stats(ratios)
```

Overall, we can see that at every sale price decile, single family homes are underassessed compared to their true sale price. However, the degree to which single family homes are underassessed is not equal. Regardless of efforts of the county, it is clear that in 2023 (for the months of Jan-Sep), houses within the lowest deciles tend to be assessed at higher ratios to their true sales price. The overall picture from 2021 to Sep 2023 is more enocouraging, but nevertheless the lowest decile tends to be assessed at higher rates than all other deciles and the 2nd to 5th lowest deciles seem to be asssed at lower rates than the higher deciles.

::: {.panel-tabset}

## Binned Scatter

``` {r}
#| results: hold

binned <- binned_scatter(ratios,
    min_reporting_yr = 2021,
    max_reporting_yr = 2023,
    jurisdiction_name = "Cook County, IL")

knitr::asis_output(htmltools::htmlPreserve(binned[[1]]))

binned[[2]]
```

## Percent Assessed

``` {r}
#| results: hold

pct_over <- pct_over_under(ratios,
    min_reporting_yr = 2021,
    max_reporting_yr = 2023,
    jurisdiction_name = "Cook County, IL")

knitr::asis_output(htmltools::htmlPreserve(pct_over[[1]]))

pct_over[[2]]
```

## Coefficient of Dispersion

``` {r}
#| results: hold

iaao_rslt <- iaao_graphs(stats,
    ratios,
    min_reporting_yr = 2021,
    max_reporting_yr = 2023,
    jurisdiction_name = "Cook County, Illinois")

knitr::asis_output(htmltools::htmlPreserve(iaao_rslt[[1]]))

iaao_rslt[[2]]
```

## Price-Related Differential

``` {r}
#| results: hold

knitr::asis_output(htmltools::htmlPreserve(iaao_rslt[[3]]))

iaao_rslt[[4]]
```

## Coefficient of Price-Related Bias

``` {r}
#| results: hold

knitr::asis_output(htmltools::htmlPreserve(iaao_rslt[[5]]))

iaao_rslt[[6]]
```

:::

## Explore trends and relationships with property sales using simple regressions

Let's evaluate a couple different linear models (linear models were chosen simply because of the lower computing power necessary to train them). First, we'll split our data.
``` {r}
library(tidymodels) 
tidymodels_prefer()

set.seed(1)
split <- initial_split(sfh_characteristics)
train_set <- training(split)
test_set <- testing(split)

set.seed(2)
train_resamples <- bootstraps(train_set)
```

We'll preprocess our data.
``` {r}
basic_rec <- recipe(sale_price ~ char_yrblt + char_bldg_sf + char_land_sf + char_beds + char_rooms + char_fbath + char_hbath + township_code, data = sfh_characteristics) %>% 
    step_mutate(years_old = 2023 - char_yrblt, role = "predictor") %>%
    remove_role(char_yrblt, old_role = "predictor") %>%
    step_string2factor(township_code) %>% 
    step_naomit(all_predictors()) %>% 
    step_novel(all_nominal_predictors()) %>%
    step_dummy(all_nominal_predictors()) %>%
    step_zv(all_predictors())

normalized_rec <- basic_rec %>% 
   step_normalize(all_predictors())
```

Save the specifications of our models.
``` {r}
ols_spec <- linear_reg() %>% 
    set_engine("lm") %>%
    set_mode("regression")

ridge_spec <- linear_reg(penalty = tune(), mixture = 0) %>% 
    set_engine("glmnet") %>%
    set_mode("regression")

lasso_spec <- linear_reg(penalty = tune(), mixture = 1) %>% 
    set_engine("glmnet") %>%
    set_mode("regression")

enet_spec <- linear_reg(penalty = tune(), mixture = tune()) %>% 
    set_engine("glmnet") %>%
    set_mode("regression")
```

Create our workflows.
``` {r}
all_workflows <- workflow_set(
    preproc = list(normalize = normalized_rec),
    models = list( 
        ols = ols_spec,
        ridge = ridge_spec,
        lasso = lasso_spec,
        enet = enet_spec))
```

Run our models.
``` {r}
ctrl_grid <- control_grid(
    save_pred = TRUE,
    save_workflow = TRUE)

res_grid <- all_workflows %>% 
    workflow_map(
        resamples = train_resamples, 
        grid = 20, 
        control = ctrl_grid,
        metrics = metric_set(rmse, rsq, ccc),
        verbose = TRUE)
```

Fit our best model (Elastic Net).
``` {r}
res_ranks <- res_grid %>% 
    rank_results('rmse') %>% 
    filter(.metric == 'rmse') %>%
    select(wflow_id, model, .config, rmse = mean, rank) %>% 
    group_by(wflow_id) %>% 
    slice_min(rank, with_ties = FALSE) %>% 
    ungroup() %>% 
    arrange(rank)

wflow_id_best <- res_ranks %>% 
    slice_min(rank, with_ties = FALSE) %>% 
    pull(wflow_id)

wf_best <- res_grid %>% 
    extract_workflow_set_result(wflow_id_best) %>% 
    select_best(metric = 'rmse')

fit_best <- res_grid %>% 
    extract_workflow(wflow_id_best) %>% 
    finalize_workflow(wf_best) %>% 
    last_fit(split = split)
```

Let's look at how well our model performs
``` {r}
train_fit <- res_grid %>% 
    extract_workflow(wflow_id_best) %>%
    finalize_workflow(wf_best) %>% 
    fit(data = train_set)

test_augment <- augment(train_fit, test_set)
```

``` {r}
mape(test_augment, truth = sale_price, estimate = .pred) %>% knitr::kable()
rmse(test_augment, truth = sale_price, estimate = .pred) %>% knitr::kable()
```

It looks like our model underestimates higher sale price homes. This would make our model regressive, which is concerning.
``` {r}
ggplot(test_augment, aes(x = sale_price, y = sale_price - .pred)) +
    geom_point() +
    labs(title = "Elastic Net Residuals and Sale Price in Cook County, IL", 
        x = "Sale Price", 
        y = "Residuals")
```

Let's see what variables have the largest impact on sale_price.  

Notice that building square feet seems to have the largest impact on the sale price. This makes implicit sense because larger single family homes tend to sell for more. We can also see that certain townships (ex: New Trier, Lake View, North Chicago) can have large impacts on the sale price of single family homes.  

Although our exploratory data analysis indicated that the number of years old a single family home was and how much land it has was associated with changes in sale prices within certain ranges it seems that the model was still able to pick up on some association.  

Interestingly, the number of beds that a single family home has was only the fifth strongest non-township predictor within this model. My guess is that this is because there is some multicolinearity between it and building square feet and number of full baths (two of our strongest non-township predictors). Elastic net takes some characteristics from ridge regression which means that it may shrink coefficients for parameters that exibit multicollinearity. In the future, we should take some caution to address concerns that may stem out of the fact that some of our parameters may exhibit multicollinearity.
``` {r}
fit_best %>%
    extract_fit_parsnip() %>%
    tidy() %>% 
    arrange(desc(abs(estimate))) %>%
    select(-penalty) %>%
    knitr::kable()
```

